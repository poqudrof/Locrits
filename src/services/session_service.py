"""
Service de session Firebase pour Locrit
Sauvegarde et restaure les sessions d'authentification
"""

import json
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional, Dict, Any


class SessionService:
    """Service de gestion des sessions Firebase persistantes"""
    
    def __init__(self, session_file: str = "data/session.json"):
        self.session_file = Path(session_file)
        self.session_data: Optional[Dict[str, Any]] = None
        
        # Cr√©er le dossier data s'il n'existe pas
        self.session_file.parent.mkdir(exist_ok=True)
        
    def save_session(self, auth_result: Dict[str, Any]) -> bool:
        """
        Sauvegarde une session d'authentification Firebase
        
        Args:
            auth_result: R√©sultat de l'authentification Firebase
            
        Returns:
            True si la sauvegarde r√©ussit
        """
        try:
            # Extraire les informations importantes
            session_data = {
                "user_id": auth_result.get("localId") or auth_result.get("uid"),
                "email": auth_result.get("email"),
                "id_token": auth_result.get("idToken"),
                "refresh_token": auth_result.get("refreshToken"),
                "expires_in": auth_result.get("expiresIn"),
                "display_name": auth_result.get("displayName"),
                "is_anonymous": auth_result.get("is_anonymous", False),
                "provider_id": auth_result.get("providerId", "anonymous" if auth_result.get("is_anonymous") else "password"),
                "saved_at": datetime.now().isoformat(),
                "expires_at": self._calculate_expiry(auth_result.get("expiresIn"))
            }
            
            # Sauvegarder dans le fichier JSON
            with open(self.session_file, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, indent=2)
            
            # Sauvegarder √©galement dans les backups locaux
            try:
                from .local_backup_service import local_backup_service
                local_backup_service.backup_session(session_data, auth_result.get("localId"))
            except Exception as backup_error:
                print(f"‚ö†Ô∏è Erreur sauvegarde backup session: {backup_error}")
            
            self.session_data = session_data
            print(f"‚úÖ Session sauvegard√©e: {session_data['email'] or 'Anonyme'}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde session: {e}")
            return False
    
    def load_session(self) -> Optional[Dict[str, Any]]:
        """
        Charge une session sauvegard√©e si elle est valide
        
        Returns:
            Donn√©es de session si valides, None sinon
        """
        try:
            if not self.session_file.exists():
                return None
                
            with open(self.session_file, 'r', encoding='utf-8') as f:
                session_data = json.load(f)
            
            # V√©rifier si la session est encore valide
            if self._is_session_valid(session_data):
                self.session_data = session_data
                print(f"‚úÖ Session restaur√©e: {session_data['email'] or 'Anonyme'}")
                return session_data
            else:
                print("‚ö†Ô∏è Session expir√©e, suppression...")
                self.clear_session()
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur chargement session: {e}")
            return None
    
    def refresh_session(self, auth_service) -> Optional[Dict[str, Any]]:
        """
        Tente de rafra√Æchir une session expir√©e ou proche de l'expiration

        Args:
            auth_service: Service d'authentification Firebase

        Returns:
            Nouvelles donn√©es de session si le refresh r√©ussit, donn√©es existantes si pas besoin de refresh
        """
        # S'assurer que session_data est charg√©
        if not self.session_data:
            self.session_data = self.load_session()

        if not self.session_data or not self.session_data.get("refresh_token"):
            return None

        # V√©rifier si la session a besoin d'√™tre rafra√Æchie
        if self._is_session_valid(self.session_data) and not self._is_session_near_expiry(self.session_data):
            return self.session_data  # Pas besoin de rafra√Æchir

        try:
            # Utiliser le refresh token pour obtenir un nouveau token
            refresh_result = auth_service.refresh_token(self.session_data["refresh_token"])

            if refresh_result.get("success"):
                # Mettre √† jour les donn√©es de session
                new_auth_data = refresh_result["user"]

                # Convertir au format de session
                session_format_data = {
                    "user_id": new_auth_data.get("localId") or new_auth_data.get("uid"),
                    "email": new_auth_data.get("email"),
                    "id_token": new_auth_data.get("idToken"),
                    "refresh_token": new_auth_data.get("refreshToken"),
                    "expires_in": new_auth_data.get("expiresIn"),
                    "display_name": new_auth_data.get("displayName"),
                    "is_anonymous": new_auth_data.get("is_anonymous", self.session_data.get("is_anonymous", False)),
                    "provider_id": new_auth_data.get("providerId", self.session_data.get("provider_id", "unknown")),
                    "saved_at": datetime.now().isoformat(),
                    "expires_at": self._calculate_expiry(new_auth_data.get("expiresIn"))
                }

                # Sauvegarder dans le fichier JSON
                with open(self.session_file, 'w', encoding='utf-8') as f:
                    json.dump(session_format_data, f, indent=2)

                # Sauvegarder √©galement dans les backups locaux
                try:
                    from .local_backup_service import local_backup_service
                    local_backup_service.backup_session(session_format_data, session_format_data.get("user_id"))
                except Exception as backup_error:
                    print(f"‚ö†Ô∏è Erreur sauvegarde backup session: {backup_error}")

                self.session_data = session_format_data
                print("üîÑ Session rafra√Æchie avec succ√®s")
                return session_format_data
            else:
                print("‚ùå √âchec du rafra√Æchissement, session supprim√©e")
                self.clear_session()
                return None

        except Exception as e:
            print(f"‚ùå Erreur rafra√Æchissement session: {e}")
            self.clear_session()
            return None
    
    def clear_session(self) -> None:
        """Supprime la session sauvegard√©e"""
        try:
            if self.session_file.exists():
                self.session_file.unlink()
            self.session_data = None
            print("üóëÔ∏è Session supprim√©e")
        except Exception as e:
            print(f"‚ùå Erreur suppression session: {e}")
    
    def get_current_session(self) -> Optional[Dict[str, Any]]:
        """Retourne la session actuelle si elle est valide"""
        if self.session_data and self._is_session_valid(self.session_data):
            return self.session_data
        return None
    
    def is_logged_in(self) -> bool:
        """V√©rifie si l'utilisateur est connect√© avec une session valide"""
        return self.get_current_session() is not None
    
    def get_user_info(self) -> Dict[str, Any]:
        """Retourne les informations utilisateur de la session actuelle"""
        session = self.get_current_session()
        if session:
            return {
                "user_id": session.get("user_id"),
                "email": session.get("email", "Utilisateur anonyme"),
                "display_name": session.get("display_name"),
                "is_anonymous": session.get("is_anonymous", False),
                "provider_id": session.get("provider_id", "unknown")
            }
        return {}
    
    def _calculate_expiry(self, expires_in: Optional[str]) -> Optional[str]:
        """Calcule la date d'expiration √† partir de expires_in"""
        if not expires_in:
            # Session anonyme ou sans expiration explicite
            # Durer 7 jours par d√©faut
            expiry = datetime.now() + timedelta(days=7)
            return expiry.isoformat()
        
        try:
            # expires_in est en secondes
            seconds = int(expires_in)
            expiry = datetime.now() + timedelta(seconds=seconds)
            return expiry.isoformat()
        except (ValueError, TypeError):
            # Si on ne peut pas parser, utiliser 1 heure par d√©faut
            expiry = datetime.now() + timedelta(hours=1)
            return expiry.isoformat()
    
    def _is_session_valid(self, session_data: Dict[str, Any]) -> bool:
        """V√©rifie si une session est encore valide"""
        try:
            expires_at = session_data.get("expires_at")
            if not expires_at:
                return False

            expiry_date = datetime.fromisoformat(expires_at)

            # V√©rifier si la session n'est pas expir√©e (sans marge pour permettre le refresh)
            return datetime.now() < expiry_date

        except Exception as e:
            print(f"‚ö†Ô∏è Erreur validation session: {e}")
            return False

    def _is_session_near_expiry(self, session_data: Dict[str, Any]) -> bool:
        """V√©rifie si une session approche de son expiration (moins de 10 minutes)"""
        try:
            expires_at = session_data.get("expires_at")
            if not expires_at:
                return True

            expiry_date = datetime.fromisoformat(expires_at)
            margin = timedelta(minutes=10)
            return datetime.now() > (expiry_date - margin)

        except Exception as e:
            return True
    
    def get_session_info(self) -> str:
        """Retourne des informations lisibles sur la session"""
        session = self.get_current_session()
        if not session:
            return "‚ùå Aucune session active"
        
        user_type = "üë§ Anonyme" if session.get("is_anonymous") else "üîê Authentifi√©"
        email = session.get("email", "Utilisateur anonyme")
        expires_at = session.get("expires_at", "Inconnue")
        
        try:
            expiry_date = datetime.fromisoformat(expires_at)
            time_left = expiry_date - datetime.now()
            
            if time_left.total_seconds() > 0:
                hours_left = int(time_left.total_seconds() // 3600)
                minutes_left = int((time_left.total_seconds() % 3600) // 60)
                time_str = f"{hours_left}h {minutes_left}m"
            else:
                time_str = "Expir√©e"
        except:
            time_str = "Inconnue"
        
        return f"{user_type} - {email} - Expire dans: {time_str}"


# Instance globale du service de session
session_service = SessionService()
