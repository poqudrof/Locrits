#!/usr/bin/env python3
"""
Script de test pour cr√©er des Locrits de d√©monstration
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.services.config_service import config_service
from datetime import datetime

def create_demo_locrits():
    """Cr√©e quelques Locrits de d√©monstration"""
    
    demo_locrits = [
        {
            'name': 'Pixie Assistant',
            'description': 'Assistant personnel intelligent et organis√©',
            'public_address': 'pixie.localhost.run',
            'active': True,
            'open_to': {
                'humans': True,
                'locrits': True,
                'invitations': True,
                'internet': False,
                'platform': False
            },
            'access_to': {
                'logs': True,
                'quick': True,
                'full': False,
                'llm': True
            },
            'ollama_model': 'llama3.2',
            'memory_enabled': True,
            'search_enabled': True,
            'created_at': datetime.now().isoformat()
        },
        {
            'name': 'Marie Recherche',
            'description': 'Sp√©cialis√©e dans la recherche et l\'analyse',
            'public_address': 'marie.example.com',
            'active': False,
            'open_to': {
                'humans': True,
                'locrits': True,
                'invitations': True,
                'internet': True,
                'platform': False
            },
            'access_to': {
                'logs': True,
                'quick': True,
                'full': True,
                'llm': True
            },
            'ollama_model': 'llama3.2',
            'memory_enabled': True,
            'search_enabled': True,
            'created_at': datetime.now().isoformat()
        },
        {
            'name': 'Bob Technique',
            'description': 'Expert en programmation et technologies',
            'public_address': 'bob.dev.local',
            'active': True,
            'open_to': {
                'humans': True,
                'locrits': True,
                'invitations': False,
                'internet': False,
                'platform': False
            },
            'access_to': {
                'logs': False,
                'quick': True,
                'full': False,
                'llm': False
            },
            'ollama_model': 'codellama',
            'memory_enabled': True,
            'search_enabled': False,
            'created_at': datetime.now().isoformat()
        }
    ]
    
    print("ü§ñ Cr√©ation des Locrits de d√©monstration...")
    
    for locrit in demo_locrits:
        name = locrit['name']
        print(f"   üìù Cr√©ation de '{name}'...")
        
        config_service.update_locrit_settings(name, locrit)
    
    # Sauvegarder la configuration
    success = config_service.save_config()
    
    if success:
        print("‚úÖ Locrits de d√©monstration cr√©√©s avec succ√®s!")
        print(f"üìÅ Configuration sauvegard√©e dans: {config_service.config_path}")
        
        # Afficher la liste
        locrits = config_service.list_locrits()
        print(f"\nüìã {len(locrits)} Locrits disponibles:")
        for name in locrits:
            settings = config_service.get_locrit_settings(name)
            status = "üü¢ Actif" if settings.get('active') else "üî¥ Inactif"
            print(f"   {status} {name} - {settings.get('description', 'Sans description')}")
    else:
        print("‚ùå Erreur lors de la sauvegarde!")

def clear_demo_locrits():
    """Supprime tous les Locrits de d√©monstration"""
    locrits = config_service.list_locrits()
    
    if not locrits:
        print("üì≠ Aucun Locrit √† supprimer")
        return
    
    print(f"üóëÔ∏è Suppression de {len(locrits)} Locrits...")
    
    for name in locrits:
        config_service.delete_locrit(name)
        print(f"   üóëÔ∏è {name} supprim√©")
    
    success = config_service.save_config()
    
    if success:
        print("‚úÖ Tous les Locrits ont √©t√© supprim√©s!")
    else:
        print("‚ùå Erreur lors de la sauvegarde!")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Gestion des Locrits de d√©monstration")
    parser.add_argument("--clear", action="store_true", help="Supprimer tous les Locrits")
    parser.add_argument("--create", action="store_true", help="Cr√©er les Locrits de d√©monstration")
    
    args = parser.parse_args()
    
    if args.clear:
        clear_demo_locrits()
    elif args.create:
        create_demo_locrits()
    else:
        print("Usage:")
        print("  python test_create_locrits.py --create   # Cr√©er les Locrits de d√©mo")
        print("  python test_create_locrits.py --clear    # Supprimer tous les Locrits")
