import { test, expect } from '@playwright/test';

test.describe('Create Locrit Tests', () => {
  test('should display create locrit form with all fields', async ({ page }) => {
    await page.goto('/create-locrit');

    // Check main heading and description
    await expect(page.getByRole('heading', { name: '‚ûï Cr√©er un nouveau Locrit' })).toBeVisible();
    await expect(page.getByText('Configurez votre nouveau Locrit avec ses param√®tres d\'acc√®s')).toBeVisible();

    // Check back button
    await expect(page.getByRole('link', { name: '‚Üê Retour √† la liste' })).toBeVisible();

    // Check general information section
    await expect(page.getByText('üìù Informations g√©n√©rales')).toBeVisible();
    await expect(page.getByRole('textbox', { name: 'Nom du Locrit *' })).toBeVisible();
    await expect(page.getByRole('textbox', { name: 'Description *' })).toBeVisible();
    await expect(page.getByRole('textbox', { name: 'Mod√®le Ollama *' })).toBeVisible();
    await expect(page.getByRole('textbox', { name: 'Adresse publique' })).toBeVisible();

    // Check default model value
    await expect(page.getByRole('textbox', { name: 'Mod√®le Ollama *' })).toHaveValue('llama3.2');

    // Check "Ouvert √†" section
    await expect(page.getByText('üîê Ouvert √†')).toBeVisible();
    await expect(page.getByRole('checkbox', { name: 'üë• Humains' })).toBeChecked();
    await expect(page.getByRole('checkbox', { name: 'ü§ñ Autres Locrits' })).toBeChecked();
    await expect(page.getByRole('checkbox', { name: 'üìß Invitations' })).toBeChecked();
    await expect(page.getByRole('checkbox', { name: 'üåê Internet' })).not.toBeChecked();
    await expect(page.getByRole('checkbox', { name: 'üè¢ Plateforme' })).not.toBeChecked();

    // Check "Acc√®s aux donn√©es" section
    await expect(page.getByText('üìä Acc√®s aux donn√©es')).toBeVisible();
    await expect(page.getByRole('checkbox', { name: 'üìù Logs syst√®me' })).toBeChecked();
    await expect(page.getByRole('checkbox', { name: 'üß† M√©moire rapide' })).toBeChecked();
    await expect(page.getByRole('checkbox', { name: 'üóÑÔ∏è M√©moire compl√®te' })).not.toBeChecked();
    await expect(page.getByRole('checkbox', { name: 'ü§ñ Informations LLM' })).toBeChecked();

    // Check action buttons
    await expect(page.getByRole('link', { name: 'Annuler' })).toBeVisible();
    await expect(page.getByRole('button', { name: '‚úÖ Cr√©er le Locrit' })).toBeVisible();
  });

  test('should validate required fields', async ({ page }) => {
    await page.goto('/create-locrit');

    // Try to submit with empty required fields
    await page.getByRole('button', { name: '‚úÖ Cr√©er le Locrit' }).click();

    // Check that form validation prevents submission
    // (This would need to be implemented in the actual form)
    const nameField = page.getByRole('textbox', { name: 'Nom du Locrit *' });
    await expect(nameField).toBeFocused(); // Or check for validation message
  });

  test('should allow filling and modifying form fields', async ({ page }) => {
    await page.goto('/create-locrit');

    // Fill in the form
    await page.getByRole('textbox', { name: 'Nom du Locrit *' }).fill('Test Locrit');
    await page.getByRole('textbox', { name: 'Description *' }).fill('Un locrit de test pour validation');
    await page.getByRole('textbox', { name: 'Mod√®le Ollama *' }).clear();
    await page.getByRole('textbox', { name: 'Mod√®le Ollama *' }).fill('mistral:7b');
    await page.getByRole('textbox', { name: 'Adresse publique' }).fill('test.localhost.run');

    // Verify values were set
    await expect(page.getByRole('textbox', { name: 'Nom du Locrit *' })).toHaveValue('Test Locrit');
    await expect(page.getByRole('textbox', { name: 'Description *' })).toHaveValue('Un locrit de test pour validation');
    await expect(page.getByRole('textbox', { name: 'Mod√®le Ollama *' })).toHaveValue('mistral:7b');
    await expect(page.getByRole('textbox', { name: 'Adresse publique' })).toHaveValue('test.localhost.run');

    // Test checkbox interactions
    await page.getByRole('checkbox', { name: 'üåê Internet' }).check();
    await expect(page.getByRole('checkbox', { name: 'üåê Internet' })).toBeChecked();

    await page.getByRole('checkbox', { name: 'üë• Humains' }).uncheck();
    await expect(page.getByRole('checkbox', { name: 'üë• Humains' })).not.toBeChecked();

    await page.getByRole('checkbox', { name: 'üóÑÔ∏è M√©moire compl√®te' }).check();
    await expect(page.getByRole('checkbox', { name: 'üóÑÔ∏è M√©moire compl√®te' })).toBeChecked();
  });

  test('should navigate back to locrits list', async ({ page }) => {
    await page.goto('/create-locrit');

    // Test back button navigation
    await page.getByRole('link', { name: '‚Üê Retour √† la liste' }).click();
    await expect(page).toHaveURL('/my-locrits');

    // Test cancel button navigation
    await page.goto('/create-locrit');
    await page.getByRole('link', { name: 'Annuler' }).click();
    await expect(page).toHaveURL('/my-locrits');
  });

  test('should have proper field descriptions and help text', async ({ page }) => {
    await page.goto('/create-locrit');

    // Check help text for various fields
    await expect(page.getByText('Le nom doit √™tre unique et servira d\'identifiant.')).toBeVisible();
    await expect(page.getByText('Une description claire aide √† comprendre le r√¥le du Locrit.')).toBeVisible();
    await expect(page.getByText('Le mod√®le Ollama √† utiliser (ex: llama3.2, codellama, mistral...).')).toBeVisible();
    await expect(page.getByText('Optionnel. Adresse pour acc√©der au Locrit depuis l\'ext√©rieur.')).toBeVisible();

    // Check permission descriptions
    await expect(page.getByText('Permettre aux utilisateurs humains de se connecter')).toBeVisible();
    await expect(page.getByText('Permettre aux autres Locrits de se connecter')).toBeVisible();
    await expect(page.getByText('Accepter les invitations externes')).toBeVisible();
    await expect(page.getByText('Acc√®s autonome √† Internet (exp√©rimental)')).toBeVisible();
    await expect(page.getByText('Interactions avec la plateforme Locrit')).toBeVisible();

    // Check data access descriptions
    await expect(page.getByText('Acc√®s aux journaux d\'activit√© du syst√®me')).toBeVisible();
    await expect(page.getByText('Acc√®s √† la m√©moire de conversation r√©cente')).toBeVisible();
    await expect(page.getByText('Acc√®s √† toute la m√©moire historique (sensible)')).toBeVisible();
    await expect(page.getByText('Acc√®s aux m√©tadonn√©es du mod√®le de langage')).toBeVisible();
  });
});