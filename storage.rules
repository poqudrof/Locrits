rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // User avatars
    match /avatars/users/{userId}.{extension} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId
        && extension.matches('(jpg|jpeg|png|gif|webp)')
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }

    // Locrit avatars
    match /avatars/locrits/{locritId}.{extension} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        request.auth.uid == getLocritOwner(locritId)
        && extension.matches('(jpg|jpeg|png|gif|webp)')
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }

    // Conversation attachments
    match /attachments/{conversationId}/{messageId}/{filename} {
      allow read, write: if request.auth != null &&
        isConversationParticipant(conversationId)
        && request.resource.size < 25 * 1024 * 1024; // 25MB limit
    }

    // System logs (read-only for owners)
    match /logs/{locritId}/{allPaths=**} {
      allow read: if request.auth != null &&
        request.auth.uid == getLocritOwner(locritId);
    }

    // Export files (temporary access for data export)
    match /exports/{userId}/{filename} {
      allow read, write: if request.auth != null && request.auth.uid == userId
        && request.resource.size < 100 * 1024 * 1024; // 100MB limit
    }

    // Helper functions
    function getLocritOwner(locritId) {
      return firestore.get(/databases/(default)/documents/locrits/$(locritId)).data.ownerId;
    }

    function isConversationParticipant(conversationId) {
      return request.auth.uid in firestore.get(/databases/(default)/documents/conversations/$(conversationId)).data.participants.map(p => p.id);
    }
  }
}